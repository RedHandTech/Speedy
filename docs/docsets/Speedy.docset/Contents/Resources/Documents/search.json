{"Enums/Time.html#/s:FO6Speedy4Time6secondFMS0_S0_":{"name":"second","abstract":"<p>Undocumented</p>","parent_name":"Time"},"Enums/Time.html#/s:FO6Speedy4Time6minuteFMS0_S0_":{"name":"minute","abstract":"<p>Undocumented</p>","parent_name":"Time"},"Enums/Time.html":{"name":"Time","abstract":"<p>Time enumeration for convinience.</p>"},"Classes/TimerMetadata.html#/s:vC6Speedy13TimerMetadata5countSi":{"name":"count","abstract":"<p>Number of updates called so far.</p>","parent_name":"TimerMetadata"},"Classes/TimerMetadata.html#/s:vC6Speedy13TimerMetadata9isRunningSb":{"name":"isRunning","abstract":"<p>Whether the timer is currently running.</p>","parent_name":"TimerMetadata"},"Classes/TimerMetadata.html#/s:FC6Speedy13TimerMetadatacFT8intervalSf_S0_":{"name":"init(interval:)","abstract":"<p>Initialises new TimerToken with given interval value and default parameters.</p>","parent_name":"TimerMetadata"},"Classes/TimerMetadata.html#/s:FC6Speedy13TimerMetadatacFT8intervalSf6delaysGSqSb_19updatesOnMainThreadGSqSb_7usesGCDGSqSb_16startImmidiatelyGSqSb__S0_":{"name":"init(interval:delays:updatesOnMainThread:usesGCD:startImmidiately:)","abstract":"<p>Initialises new TimerToken with given values.</p>","parent_name":"TimerMetadata"},"Classes/TimerMetadata.html#/s:FC6Speedy13TimerMetadata5startFT_T_":{"name":"start()","abstract":"<p>Starts the timer if in the paused or stop state.</p>","parent_name":"TimerMetadata"},"Classes/TimerMetadata.html#/s:FC6Speedy13TimerMetadata5pauseFT_T_":{"name":"pause()","abstract":"<p>Pauses the timer. Count is not cleared.</p>","parent_name":"TimerMetadata"},"Classes/TimerMetadata.html#/s:FC6Speedy13TimerMetadata4stopFT_T_":{"name":"stop()","abstract":"<p>Stops the timer (clears the count).</p>","parent_name":"TimerMetadata"},"Classes/TimerFunction.html#/s:FC6Speedy13TimerFunction2doFFxxGCS_11Inspectablex_":{"name":"do(_:)","abstract":"<p>A required function that defines how a value is updated over time.</p>","parent_name":"TimerFunction"},"Classes/Inspectable.html#/s:FC6Speedy11Inspectable4whenFFxSbGS0_x_":{"name":"when(_:)","abstract":"<p>Appends a condition (predicate) to the observation chain.</p>","parent_name":"Inspectable"},"Classes/Inspectable.html#/s:FC6Speedy11Inspectable3mapurFFxqd__GS0_qd___":{"name":"map(_:)","abstract":"<p>Appends a mapping function to the observation chain.</p>","parent_name":"Inspectable"},"Classes/Inspectable.html#/s:FC6Speedy11Inspectable7compareFFTxGSqx__SbGS0_x_":{"name":"compare(_:)","abstract":"<p>Appends a comparison function to the observation chain.</p>","parent_name":"Inspectable"},"Classes/Inspectable.html#/s:FC6Speedy11Inspectable5watchFFxT_GS0_x_":{"name":"watch(_:)","abstract":"<p>Appends a watch function to the observation chain. Used to observe values at any given place in the observation chain.</p>","parent_name":"Inspectable"},"Classes/Inspectable.html#/s:FC6Speedy11Inspectable7inspectFFxT_T_":{"name":"inspect(_:)","abstract":"<p>Appends an inspect function to the observation chain. This terminates the chain an no more operations can be perfomed for the current value update.</p>","parent_name":"Inspectable"},"Classes/Inspectable.html#/s:Fe6SpeedyRxs9EquatablerCS_11Inspectable8distinctFT_GS1_x_":{"name":"distinct()","abstract":"<p>Appends a comparison function to the observation chain that asserts that the new value is different from the previous one.</p>","parent_name":"Inspectable"},"Classes/Value.html#/s:vC6Speedy5Value5valuex":{"name":"value","abstract":"<p>The raw value currently held by the class.</p>","parent_name":"Value"},"Classes/Value.html#/s:vC6Speedy5Value8oldValueGSqx_":{"name":"oldValue","abstract":"<p>The previous value. Starting value is nil.</p>","parent_name":"Value"},"Classes/Value.html#/s:FC6Speedy5ValuecFxGS0_x_":{"name":"init(_:)","abstract":"<p>Creates a new instance of Value.</p>","parent_name":"Value"},"Classes/Value.html#/s:FC6Speedy5Value4tickFCS_13TimerMetadataGCS_13TimerFunctionx_":{"name":"tick(_:)","abstract":"<p>Instructs a value to begin an update loop.</p>","parent_name":"Value"},"Classes/Value.html#/s:FC6Speedy5Value5everyFOS_4TimeGCS_13TimerFunctionx_":{"name":"every(_:)","abstract":"<p>Instructs a value to begin an update loop configured to fire every given interval. NOTE: This creates an infinitely ticking loop.</p>","parent_name":"Value"},"Classes/Wait.html#/s:FC6Speedy4WaitcFSfS0_":{"name":"init(_:)","abstract":"<p>Creates a new Wait instance that waits for the given number of seconds.</p>","parent_name":"Wait"},"Classes/Wait.html#/s:FC6Speedy4Wait4thenFFT_T_T_":{"name":"then(_:)","abstract":"<p>Specifies the closure to be called after the wait is over.</p>","parent_name":"Wait"},"Classes/Wait.html#/s:FC6Speedy4Wait6repeatFFRSbT_T_":{"name":"repeat(_:)","abstract":"<p>Specifies the closure to be called every n seconds.</p>","parent_name":"Wait"},"Classes/Wait.html#/s:FC6Speedy4Wait6cancelFT_T_":{"name":"cancel()","abstract":"<p>Undocumented</p>","parent_name":"Wait"},"Classes/Wait.html":{"name":"Wait","abstract":"<p>A class that implements a timer functionality. Use to trigger events after a given time, optionally on repeat.</p>"},"Classes/Value.html":{"name":"Value","abstract":"<p>A class that wraps any value. This class provides the starting point for value observation with Speedy.</p>"},"Classes/Inspectable.html":{"name":"Inspectable","abstract":"<p>A class that defines actions that can be perfomed when an observed value is changed.</p>"},"Classes/TimerFunction.html":{"name":"TimerFunction","abstract":"<p>A class that encapsulates functionality that will periodically update a value.</p>"},"Classes/TimerMetadata.html":{"name":"TimerMetadata","abstract":"<p>A meta data class that is used to configure timer/upate loop behaviour.</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Enums.html":{"name":"Enums","abstract":"<p>The following enums are available globally.</p>"}}